'use strict';
console.clear();

async function beep() {
  // https://freesound.org/data/previews/467/467882_5487341-lq.mp3
  //let snd = new Audio('data:audio/mpeg;base64,');
// Outlook Sound
let snd = new Audio('data:audio/mpeg;base64,');

return snd.play();
}

/* Signaling Server */
const socket = io({
  autoConnect: false
});

socket.on('connect', () => {
  console.log('[PROCTOR] Connected to the signaling server.');
  socket.emit('login');
  console.log('[PROCTOR] Registered user.');
});

socket.on('disconnect', () => {
  console.warn('[PROCTOR] Disconnected from signaling server.');
  alert('You have been disconnected. Please reload the page.');
});

/* WebRTC Peer Connection */
const { RTCPeerConnection, RTCSessionDescription } = window;

let configuration = {
  iceServers: null,
  iceTransportPolicy: 'all', // relay for TURN only
  iceCandidatePoolSize: 0
};

socket.on('config', data => {
  console.log('[PROCTOR] Obtained config: %o', data);
  configuration.iceServers = data.iceServers;
  let message = document.querySelector('#message');
  message.innerHTML = `Logged in as <strong>${data.username}</strong>`;
});

class Connection {
  constructor() {
    this.peerConnection = new RTCPeerConnection(configuration);
    this.timeoutHandle = null;

    // peerConnection.onicecandidate = handleICECandidateEvent;
    // peerConnection.ontrack = handleTrackEvent;
    // peerConnection.onnegotiationneeded = handleNegotiationNeededEvent;
    // peerConnection.onremovetrack = handleRemoveTrackEvent;
    // peerConnection.oniceconnectionstatechange = handleICEConnectionStateChangeEvent;
    // peerConnection.onicegatheringstatechange = handleICEGatheringStateChangeEvent;
    // peerConnection.onsignalingstatechange = handleSignalingStateChangeEvent;

    this.peerConnection.onicecandidate = ({candidate}) => {
      console.log('[PROCTOR] Obtained an ICE Candidate: %o.', candidate);
      if (candidate === null) return; // useless
      if (candidate.candidate === '') return;
      console.log('sending candidate to ' + socket.id);
      socket.emit('submit candidate', { 
        candidate: candidate,
        to: from
      });
    };

    this.peerConnection.addEventListener('connectionstatechange', event => {
      console.log('[PROCTOR] Connection has changed: %o.', event);
      console.log('[PROCTOR] Connection state:', this.peerConnection.connectionState);
      switch (this.peerConnection.connectionState) {
        case 'connected':
          // Peers connected!
          console.log('[PROCTOR] Connected to remote stream.');
          if (this.timeoutHandle) {
            // in your click function, call clearTimeout
            window.clearTimeout(this.timeoutHandle);
          } else {
            alert('Connected!');
          }
          break;
        case 'disconnected':
          // in the example above, assign the result
          this.timeoutHandle = window.setTimeout(() => {
            console.warn('[PROCTOR] Connection is unstable.');
            this.stop();
          }, 15000);  // 15 second to reconnect
          break;
        case 'failed':
          console.warn('[PROCTOR] Connection failed.');
          this.stop();
          break;
        case 'closed':
          // this is NOT fired on chrome, as per design specs
          // https://github.com/w3c/webrtc-pc/issues/1020
          // https://bugs.chromium.org/p/chromium/issues/detail?id=699036
          // so I will be ignoring this from now on
          // beep();
          // console.warn('[PROCTOR] %s has disconnected from remote stream.', this.username);
          // alert(this.username + ' has disconnected.');
          // this.stop();
      }
    });
  }

  async stop() { 
    this.peerConnection.close();
    if (this.timeoutHandle) window.clearTimeout(this.timeoutHandle);

    await this.destructionCallback();
    delete this;
  }
};

class Student {
  constructor(from, username) {
    this.from = from;
    this.username = username;

    this.connections = {};

    let s = document.createElement('div');
    s.classList.add('student');
    s.innerHTML = `<p>${this.username}</p><button class="talk">Talk</button>`;

    // Local muting
    let talkButton = s.querySelector('.talk');
    talkButton.onclick = evt => {
      if (talkButton.innerHTML == 'talk') {
        Object.keys(this.connections).forEach(key => {
          let conn = this.connections[key];
          conn.rtpSender.track.enabled = true;
        });
        talkButton.innerHTML = 'mute';
      } else {
        Object.keys(this.connections).forEach(key => {
          let conn = this.connections[key];
          conn.rtpSender.track.enabled = false;
        });
        talkButton.innerHTML = 'talk';
      }
    };

    let div = document.createElement('div');
    div.classList.add('remote-video-container');
    let videoContainer = document.querySelector('#video-container');
    this.DOMContainer = div;

    s.appendChild(div);
    videoContainer.appendChild(s);
  }

  createNewConnection(src) {
    let conn = new Connection();

    conn.addedStreams = {};
    conn.peerConnection.ontrack = ({ streams: [stream] }) => {  // called once per track
      // stream is the MediaStream that the current track (event.track) belongs to
      console.log('[PROCTOR] Received stream %o.', stream.getTracks());
      if (stream.id in conn.addedStreams) return;  // this stream is already added
      conn.addedStreams[stream.id] = true;

      let remoteVideo = document.createElement('video');
      remoteVideo.classList.add('remote-video');
      remoteVideo.autoplay = true;
      remoteVideo.controls = true;
      //remoteVideo.load(); 
      remoteVideo.srcObject = stream;

      conn.video = remoteVideo;

      this.DOMContainer.appendChild(remoteVideo);
    };

    conn.destructionCallback = () => new Promise(async (resolve, reject) => {
      await beep();
      console.warn('[PROCTOR] %s has disconnected a remote stream.', this.username);
      alert(this.username + ' has disconnected a stream.');

      //let box = this.DOMContainer.parentNode;
      //if (box && box.parentNode) box.parentNode.removeChild(box);

      let box = conn.video;
      if (box && box.parentNode) box.parentNode.removeChild(box);
      //delete this; // this connection is now useless
      resolve();
    });

    this.connections[src] = conn;

    return conn;
  }

  async stop() { 
    //this.peerConnection.close();
    //if (this.timeoutHandle) window.clearTimeout(this.timeoutHandle);

    await beep();
    console.warn('[PROCTOR] %s has disconnected from remote stream.', this.username);
    alert(this.username + ' has disconnected.');

    let box = this.DOMContainer.parentNode;
    if (box && box.parentNode) box.parentNode.removeChild(box);

    delete this; // this connection is now useless
  }
};

let students = {};

let connectButton = document.querySelector('#connect');
connectButton.addEventListener('click', e => {
  socket.open();
});

let onlineUsers = {};
socket.on('online users', data => {
  console.log('[PROCTOR] Online users: %o', data);
  onlineUsers = data;

  let ul = document.querySelector('#online-users');
  while (ul.firstChild) { ul.removeChild(ul.firstChild); }
  Object.keys(data).forEach(async (key) => {
    let li = document.createElement('li');
    li.classList.add('list-item');
    li.innerHTML = data[key];
    li.dataset.id = key;
    ul.appendChild(li);
  });
});

socket.on('candidate available', data => {
  console.log('[PROCTOR] Received candidate %o.', data);
  if (!students[data.from.user]) return;
  students[data.from.user].connections[data.from.socket].peerConnection.addIceCandidate(data.candidate);
});

let localStreams = [];

socket.on('available offer', async (data) => {
  console.log('[PROCTOR] Received an offer %o.', data);

  if (!students.hasOwnProperty(data.from.user)) {
    students[data.from.user] = new Student(data.from.user, onlineUsers[data.from.user]); // get username
    console.log('[PROCTOR] Created new student %s.', data.from.user)
  }
  let s = students[data.from.user];
  let conn = s.createNewConnection(data.from.socket);
  console.log('[PROCTOR] Created new connection for student %s.', data.from.user);

  await conn.peerConnection.setRemoteDescription(
    new RTCSessionDescription(data.offer)
  );

  let stream = await navigator.mediaDevices.getUserMedia({ audio: true });
  console.log('got stream %o', stream);
  stream.getTracks().forEach(track => {
    track.enabled = false;  // TODO: temporary muting

    console.log('add track %o of stream %o', track, stream);
    conn.rtpSender = conn.peerConnection.addTrack(track, stream)
    // TODO: conn.rtpSender.replaceTrack(null) for muting

    // Global muting
    let talkButton = document.querySelector('#talk');
    talkButton.onclick = evt => {
      if (talkButton.innerHTML == 'talk') track.enabled = true, talkButton.innerHTML = 'mute';
      else track.enabled = false, talkButton.innerHTML = 'talk';
    };
  });

  //localStreams.forEach(stream => stream.getTracks().forEach(track => {
  //  console.log('add track %o of stream %o', track, stream);
  //  s.peerConnection.addTrack(track, stream)
  //}));

  const answer = await conn.peerConnection.createAnswer({}); // no options yet
  await conn.peerConnection.setLocalDescription(new RTCSessionDescription(answer));

  socket.emit('accept offer', {
    answer: answer,
    to: data.from
  });

  console.log('[PROCTOR] Accepted offer.');
});

// MARK: attempt to support voice
function addStream(stream) {
  localStreams.push(stream);
  console.log('added stream yay');
  //Object.keys(student).forEach(key => {
  //  let pc = student[key];
  //  console.log('[PROCTOR] Adding stream... %o', stream);
  //  stream.getTracks().forEach(track => peerConnection.addTrack(track, stream));
  //});
}

//(async function() {
//  if(navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
//    let cameraVideo = null;
//    let talkButton = document.querySelector('#talk');
//
//    talkButton.addEventListener('click', e => {
//      soundOnly = document.getElementById('soundOnly');
//      navigator.mediaDevices.getUserMedia({ audio: true }).then(function(stream) {
//        //cameraVideo.src = window.URL.createObjectURL(stream);
//        //soundOnly.srcObject = stream;
//        //soundOnly.play();
//
//        console.log('got stream %o', stream)
//        addStream(stream);
//      }).catch(err => {
//        console.log('error: ' + err);
//      });
//    });
//  } else {
//    alert('your device is not supported');
//  }
//})();
